@model descent_remote_final.ViewModels.DashboardUserViewModel
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@Html.AntiForgeryToken()

@{
    ViewData["Title"] = "- " + Model.Name;
    Layout = "~/Views/Shared/_PlayerLayout.cshtml";
}

<nav class="navbar navbar-expand-sm bg-dark navbar-dark">
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#collapsibleNavbar">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="collapsibleNavbar">
        <ul class="nav navbar-nav mr-auto">
            <li class="nav-item">
                <a class="nav-link" asp-controller="home" asp-action="character" asp-route-username="@Model.Name">Hero</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" asp-controller="home" asp-action="overlord" asp-route-username="@Model.Name">Overlord</a>
            </li>
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Other Heroes
                </a>
                <div id="other-heroes-dropdown-menu" class="dropdown-menu" aria-labelledby="navbarDropdown">
                </div>
            </li>
        </ul>
        <ul class="nav navbar-nav">
            <li class="nav-item">
                <a class="nav-link" asp-controller="home" asp-action="index">User Selection</a>
            </li>
        </ul>
    </div>
</nav>
<div class="row main-container">
    <div class="col-xl-6 d-flex justify-content-center">
        <div class="char-attr-container float-left">
            <div class="char-might">
                <div class="attr-rectangle-left might">
                    @Html.DisplayNameFor(model => model.Character.Might)
                </div>
                <div class="attr-circle-left might">
                    @Html.DisplayFor(model => model.Character.Might)
                </div>
            </div>
            <div class="char-willpower">
                <div class="attr-rectangle-left willpower">
                    @Html.DisplayNameFor(model => model.Character.Willpower)
                </div>
                <div class="attr-circle-left willpower">
                    @Html.DisplayFor(model => model.Character.Willpower)
                </div>
            </div>
            <div class="char-knowledge">
                <div class="attr-rectangle-left knowledge">
                    @Html.DisplayNameFor(model => model.Character.Knowledge)
                </div>
                <div class="attr-circle-left knowledge">
                    @Html.DisplayFor(model => model.Character.Knowledge)
                </div>
            </div>
            <div class="char-awareness">
                <div class="attr-rectangle-left awareness">
                    @Html.DisplayNameFor(model => model.Character.Awareness)
                </div>
                <div class="attr-circle-left awareness">
                    @Html.DisplayFor(model => model.Character.Awareness)
                </div>
            </div>
        </div>
        @switch (Model.Character.Name)
        {
            case "Grisban the Thirsty":
                <div class="img-container float-left">
                    <img class="char-img" src="~/images/characters/grisban_the_thirsty_full.jpg" alt="Image" />
                </div>
                break;
            case "Jain Fairwood":
                <div class="img-container float-left">
                    <img class="char-img" src="~/images/characters/jain_fairwood_full.png" alt="Image" />
                </div>
                break;
            case "Widow Tarha":
                <div class="img-container float-left">
                    <img class="char-img" src="~/images/characters/widow_tarha_full.jpg" alt="Image" />
                </div>
                break;
            case "Ashirian":
                <div class="img-container float-left">
                    <img class="char-img" src="~/images/characters/ashrian_full.jpg" alt="Image" />
                </div>
                break;
        }
        <div class="float-left char-base-attr-container">
            <div class="char-speed">
                <div class="attr-rectangle-right speed">
                    @Html.DisplayNameFor(model => model.Character.Speed)
                </div>
                <div class="attr-circle-right speed">
                    @Html.DisplayFor(model => model.Character.Speed)
                </div>
            </div>
            <div class="char-health">
                <div class="attr-rectangle-right health">
                    @Html.DisplayNameFor(model => model.Character.Health)
                </div>
                <div class="char-health-values attr-circle-right health">
                    <p id="currentHealth" class="attribute-current">@Html.DisplayFor(model => model.Character.CurrentHealth)</p>
                    <span class="attribute-slash"></span>
                    <p id="totalHealth" class="attribute-total">@Html.DisplayFor(model => model.Character.Health)</p>
                </div>
                <div class="char-health-buttons">
                    <table>
                        <tr>
                            <td>
                                <button id="addHealth" class="add-button health" onclick="addHealth()">
                                    <span class="button-text">
                                        +
                                    </span>
                                </button>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <button id="removeHealth" class="remove-button health" onclick="removeHealth()">
                                    <span class="button-text">
                                        -
                                    </span>
                                </button>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="char-stamina">
                <div class="attr-rectangle-right stamina">
                    @Html.DisplayNameFor(model => model.Character.Stamina)
                </div>
                <div class="char-stamina-values attr-circle-right stamina">
                    <p id="currentStamina" class="attribute-current">@Html.DisplayFor(model => model.Character.CurrentStamina)</p>
                    <span class="attribute-slash"></span>
                    <p id="totalStamina" class="attribute-total">@Html.DisplayFor(model => model.Character.Stamina)</p>
                </div>
                <div class="char-stamina-buttons">
                    <table>
                        <tr>
                            <td>
                                <button id="addStamina" class="add-button stamina" onclick="addStamina()">
                                    <span class="button-text">
                                        +
                                    </span>
                                </button>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <button id="removeStamina" class="remove-button stamina" onclick="removeStamina()">
                                    <span class="button-text">
                                        -
                                    </span>
                                </button>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="char-defense">
                <div class="attr-rectangle-right defense">
                    Defense
                </div>
                <div class="attr-circle-right defense">
                    @if (Model.Character.DefenseDice.FirstOrDefault() == descent_remote_final.Constants.DefenseDie.Gray)
                    {
                        <img class="defense-img" src="~/images/icons/dice/dice_grey.png"/>
                    }
                    else
                    {
                        @Html.DisplayFor(model => model.Character.DefenseDice.FirstOrDefault())
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="col-xl-6 hero-abilities-container">
        <div class="hero-abilities">
            <table>
                <tr>
                    <td>
                        <div>
                            <h5 class="ability-header">Hero Ability:</h5>
                            <span>
                                @Html.DisplayFor(model => model.Character.HeroAbility)
                            </span>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        @if (Model.Character.HeroicFeatUsed)
                        {
                            <div id="heroic-feat-container" hidden=true>
                                <div>
                                    <h5 class="ability-header">Heroic Feat:</h5>
                                    <span>
                                        @Html.DisplayFor(model => model.Character.HeroicFeat)
                                    </span>
                                </div>
                                <div>
                                    <button id="heroic-feat-button" onclick="exhaustHeroicFeat()">Use Heroic Feat</button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div id="heroic-feat-container">
                                <div>
                                    <h5 class="ability-header">Heroic Feat:</h5>
                                    <span>
                                        @Html.DisplayFor(model => model.Character.HeroicFeat)
                                    </span>
                                </div>
                                <div>
                                    <button id="heroic-feat-button" onclick="exhaustHeroicFeat()">Use Heroic Feat</button>
                                </div>
                            </div>
                        }

                    </td>
                </tr>
            </table>
        </div>
    </div> 
</div>
<div class="row card-list-container">
    @foreach (var card in Model.FamiliarCards)
    {
        <div id="@card.Id" class="card-container">
            <div class="gallery">
                @if (card.CurrentHealth <= 0)
                {
                    <img class="card-image exhausted" src="@card.Location" />
                }
                else
                {
                    <img class="card-image" src="@card.Location" />
                }
                <div class="familiar-health-container">
                    <p id="@card.CurrentHealthId" class="familiar-attribute-current">@card.CurrentHealth</p>
                    <span class="familiar-slash"></span>
                    <p id="@card.HealthId" class="familiar-attribute-total">@card.Health</p>
                </div>
                <div class="middle">
                    @if (card.CurrentHealth <= 0)
                    {
                        <button id="@card.AddHealthId" class="exhaust-button" onclick="addFamiliarHealth(this)" hidden=true>+</button>
                        <button id="@card.RemoveHealthId" class="exhaust-button" onclick="removeFamiliarHealth(this)" hidden=true>-</button>
                        <button id="@card.ReviveId" class="exhaust-button" onclick="reviveFamiliar(this)">Revive</button>
                    }
                    else
                    {
                        <button id="@card.AddHealthId" class="exhaust-button" onclick="addFamiliarHealth(this)">+</button>
                        <button id="@card.RemoveHealthId" class="exhaust-button" onclick="removeFamiliarHealth(this)">-</button>
                        <button id="@card.ReviveId" class="exhaust-button" onclick="reviveFamiliar(this)" hidden=true>Revive</button>
                    }

                </div>
            </div>
        </div>
    }
    @foreach (var card in Model.SkillCards)
    {
        <div id="@card.Id" class="card-container">
            <div class="gallery">
                @if (card.IsExhausted)
                {
                    <img class="card-image exhausted" src="@card.Location" />
                    <div class="middle">
                        <button id="@card.ExhaustButtonId" class="exhaust-button" onclick="exhaustCard(this)" hidden=true>Exhaust</button>
                        <button id="@card.RefreshButtonId" class="exhaust-button" onclick="refreshCard(this)">Refresh</button>
                    </div>
                }
                else
                {
                    <img class="card-image" src="@card.Location" />
                    <div class="middle">
                        <button id="@card.ExhaustButtonId" class="exhaust-button" onclick="exhaustCard(this)">Exhaust</button>
                        <button id="@card.RefreshButtonId" class="exhaust-button" onclick="refreshCard(this)" hidden=true>Refresh</button>
                    </div>
                }

            </div>
        </div>
    }
    @foreach (var card in Model.ShopCards)
    {
        <div id="@card.Id" class="card-container">
            <div class="gallery">
                @if (card.IsExhausted)
                {
                    <img class="card-image exhausted" src="@card.Location" />
                }
                else
                {
                    <img class="card-image" src="@card.Location" />
                }
                @if (card.IsEquipped)
                {
                    <span class="equipped-circle" ></span>
                }
                else
                {
                    <span class="equipped-circle" hidden=true></span>
                }
                <div class="middle">
                    @if (card.IsExhausted)
                    {
                        <button id="@card.ExhaustButtonId" class="exhaust-button" onclick="exhaustCard(this)" hidden=true>Exhaust</button>
                        <button id="@card.RefreshButtonId" class="exhaust-button" onclick="refreshCard(this)">Refresh</button>
                    }
                    else
                    {
                        <button id="@card.ExhaustButtonId" class="exhaust-button" onclick="exhaustCard(this)">Exhaust</button>
                        <button id="@card.RefreshButtonId" class="exhaust-button" onclick="refreshCard(this)" hidden=true>Refresh</button>
                    }
                    @if (card.IsEquipped)
                    {
                        <button id="@card.EquipButtonId" class="exhaust-button" onclick="equipCard(this)" hidden=true>Equip</button>
                        <button id="@card.UnequipButtonId" class="exhaust-button" onclick="unequipCard(this)">Unequip</button>
                    }
                    else
                    {
                        <button id="@card.EquipButtonId" class="exhaust-button" onclick="equipCard(this)">Equip</button>
                        <button id="@card.UnequipButtonId" class="exhaust-button" onclick="unequipCard(this)" hidden=true>Unequip</button>
                    }
                </div>
            </div>
        </div>
    }
    @foreach (var card in Model.ClassEquipmentCards)
    {
        <div id="@card.Id" class="card-container">
            <div class="gallery">
                @if (card.IsExhausted)
                {
                    <img class="card-image exhausted" src="@card.Location" />
                }
                else
                {
                    <img class="card-image" src="@card.Location" />
                }
                @if (card.IsEquipped)
                {
                    <span class="equipped-circle"></span>
                }
                else
                {
                    <span class="equipped-circle" hidden=true></span>
                }
                <div class="middle">
                    @if (card.IsExhausted)
                    {
                        <button id="@card.ExhaustButtonId" class="exhaust-button" onclick="exhaustCard(this)" hidden=true>Exhaust</button>
                        <button id="@card.RefreshButtonId" class="exhaust-button" onclick="refreshCard(this)">Refresh</button>
                    }
                    else
                    {
                        <button id="@card.ExhaustButtonId" class="exhaust-button" onclick="exhaustCard(this)">Exhaust</button>
                        <button id="@card.RefreshButtonId" class="exhaust-button" onclick="refreshCard(this)" hidden=true>Refresh</button>
                    }
                    @if (card.IsEquipped)
                    {
                        <button id="@card.EquipButtonId" class="exhaust-button" onclick="equipCard(this)" hidden=true>Equip</button>
                        <button id="@card.UnequipButtonId" class="exhaust-button" onclick="unequipCard(this)">Unequip</button>
                    }
                    else
                    {
                        <button id="@card.EquipButtonId" class="exhaust-button" onclick="equipCard(this)">Equip</button>
                        <button id="@card.UnequipButtonId" class="exhaust-button" onclick="unequipCard(this)" hidden=true>Unequip</button>
                    }
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script src="~/js/character.js" asp-append-version="true"></script>
}
